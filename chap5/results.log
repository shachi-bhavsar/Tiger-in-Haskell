../testcases/test1.tig : 
/* an array type and an array variable */
let
	type  arrtype = array of int
	var arr1:arrtype := arrtype [10] of 0
in
	arr1
end

../testcases/test10.tig : 
/* error : body of while not unit */
while(10 > 5) do 5+6

../testcases/test11.tig : 
/* error hi expr is not int, and index variable erroneously assigned to.  */
for i:=10 to " " do 
	i := i - 1

../testcases/test12.tig : 
/* valid for and let */

let
	var a:= 0
in 
	for i:=0 to 100 do (a:=a+1;())
end

../testcases/test13.tig : 
/* error: comparison of incompatible types */

3 > "df"

../testcases/test14.tig : 
/* error : compare rec with array */

let

	type arrtype = array of int
	type rectype = {name:string, id: int}

	var rec := rectype {name="aname", id=0}
	var arr := arrtype [3] of 0

in
	if rec <> arr then 3 else 4
end

../testcases/test15.tig : 
/* error : if-then returns non unit */

if 20 then 3

../testcases/test16.tig : 
/* error: mutually recursive types thet do not pass through record or array */
let 

type a=c
type b=a
type c=d
type d=a

in
 ""
end

../testcases/test17.tig : 
/* error: definition of recursive types is interrupted */
let
/* define a tree */
type tree ={key: int, children: treelist}
var d:int :=0
type treelist = {hd: tree, tl: treelist}

in
	d
end

../testcases/test18.tig : 
/* error : definition of recursive functions is interrupted */
let

function do_nothing1(a: int, b: string):int=
		(do_nothing2(a+1);0)

var d:=0

function do_nothing2(d: int):string =
		(do_nothing1(d, "str");" ")

in
	do_nothing1(0, "str2")
end


../testcases/test19.tig : 
/* error : second function uses variables local to the first one, undeclared variable */
let

function do_nothing1(a: int, b: string):int=
		(do_nothing2(a+1);0)

function do_nothing2(d: int):string =
		(do_nothing1(a, "str");" ")

in
	do_nothing1(0, "str2")
end


../testcases/test2.tig : 
/* arr1 is valid since expression 0 is int = myint */
let
	type myint = int
	type  arrtype = array of myint

	var arr1:arrtype := arrtype [10] of 0
in
	arr1
end

../testcases/test20.tig : 
/* error: undeclared variable i */

while 10 > 5 do (i+1;())

../testcases/test21.tig : 
/* error : procedure returns value  and procedure is used in arexpr */
let

/* calculate n! */
function nfactor(n: int) =
		if  n = 0 
			then 1
			else n * nfactor(n-1)

in
	nfactor(10)
end


../testcases/test22.tig : 
/* error : field not in record type */

let 
	type rectype = {name:string , id:int}
	var rec1 := rectype {name="Name", id=0}
in
	rec1.nam := "asd"
end

../testcases/test23.tig : 
/* error : type mismatch */

let 
	type rectype = {name:string , id:int}
	var rec1 := rectype {name="aname", id=0}
in
	rec1.name := 3;
	rec1.id := "" 
end

../testcases/test24.tig : 
/* error : variable not array */
let 
	var d:=0
in
	d[3]
end


../testcases/test25.tig : 
/* error : variable not record */
let 
	var d:=0
in
	d.f 
end


../testcases/test26.tig : 
/* error : integer required */

3 + "var"

../testcases/test27.tig : 
/* locals hide globals */
let
	var a:=0

	function g(a:int):int = a 
in
 g(2)
end

../testcases/test28.tig : 
/* error : different record types */

let
	type rectype1 = {name:string , id:int}
	type rectype2 = {name:string , id:int}

	var rec1: rectype1 := rectype2 {name="Name", id=0}
in
	rec1
end

../testcases/test29.tig : 
/* error : different array types */

let
	type arrtype1 = array of int
	type arrtype2 = array of int

	var arr1: arrtype1 := arrtype2 [10] of 0
in
	arr1
end

../testcases/test3.tig : 
/* a record type and a record variable */
let
	type  rectype = {name:string, age:int}
	var rec1:rectype := rectype {name="Nobody", age=1000}
in
	rec1.name := "Somebody";
	rec1
end

../testcases/test30.tig : 
/* synonyms are fine */

let 
		type a = array of int
		type b = a

		var arr1:a := b [10] of 0
in
		arr1[2]
end

../testcases/test31.tig : 
/* error : type constraint and init value differ */
let 
	var a:int := " "
in
	a
end

../testcases/test32.tig : 
/* error : initializing exp and array type differ */

let
	type arrayty = array of int

	var a := arrayty [10] of " "
in
	0
end

../testcases/test33.tig : 
/* error : unknown type */
let
	var a:= rectype {}
in
	0
end

../testcases/test34.tig : 
/* error : formals and actuals have different types */
let
	function g (a:int , b:string):int = a
in
	g("one", "two")
end

../testcases/test35.tig : 
/* error : formals are more then actuals */
let
	function g (a:int , b:string):int = a
in
	g("one")
end

../testcases/test36.tig : 
/* error : formals are fewer then actuals */
let
	function g (a:int , b:string):int = a
in
	g(3,"one",5)
end

../testcases/test37.tig : 
/* redeclaration of variable; this is legal, there are two different
   variables with the same name.  The second one hides the first.  */
let
	var a := 0
	var a := " "
in
	0
end

../testcases/test38.tig : 
/* This is illegal, since there are two types with the same name
    in the same (consecutive) batch of mutually recursive types. 
    See also test47  */
let
	type a = int
	type a = string
in
	0
end

../testcases/test39.tig : 
/* This is illegal, since there are two functions with the same name
    in the same (consecutive) batch of mutually recursive functions.
   See also test48 */
let
	function g(a:int):int = a
	function g(a:int):int = a
in
	0
end

../testcases/test4.tig : 
/* define a recursive function */
let

/* calculate n! */
function nfactor(n: int): int =
		if  n = 0 
			then 1
			else n * nfactor(n-1)

in
	nfactor(10)
end


../testcases/test40.tig : 
/* error : procedure returns value */
let
	function g(a:int) = a
in 
	g(2)
end


../testcases/test41.tig : 
/* local types hide global */
let
	type a = int
in
	let
		type a = string
	in
		0
	end
end

../testcases/test42.tig : 
/* correct declarations */
let 

type arrtype1 = array of int
type rectype1 = {name:string, address:string, id: int , age: int}
type arrtype2 = array of rectype1
type rectype2 = {name : string, dates: arrtype1}

type arrtype3 = array of string

var arr1 := arrtype1 [10] of 0
var arr2  := arrtype2 [5] of rectype1 {name="aname", address="somewhere", id=0, age=0}
var arr3:arrtype3 := arrtype3 [100] of ""

var rec1 := rectype1 {name="Kapoios", address="Kapou", id=02432, age=44}
var rec2 := rectype2 {name="Allos", dates= arrtype1 [3] of 1900}

in

arr1[0] := 1; 
arr1[9] := 3;
arr2[3].name := "kati";
arr2[1].age := 23;
arr3[34] := "sfd";

rec1.name := "sdf";
rec2.dates[0] := 2323;
rec2.dates[2] := 2323

end

../testcases/test43.tig : 
/* initialize with unit and causing type mismatch in addition */

let 
	var a := ()
in
	a + 3
end

../testcases/test44.tig : 
/* valid nil initialization and assignment */
let 

	type rectype = {name:string, id:int}
	var b:rectype := nil

in

	b := nil

end

../testcases/test45.tig : 
/* error: initializing nil expressions not constrained by record type */
let 
	type rectype = {name:string, id:int}

	var a:= nil
in
	a
end

../testcases/test46.tig : 
/* valid rec comparisons */
let 
	type rectype = {name:string, id:int}
	var b:rectype := nil
in
	b = nil;
	b <> nil
end

../testcases/test47.tig : 
/* This is legal.  The second type "a" simply hides the first one.
   Because of the intervening variable declaration, the two "a" types
   are not in the same  batch of mutually recursive types.
   See also test38 */
let
	type a = int
	var b := 4
	type a = string
in
	0
end

../testcases/test48.tig : 
/* This is legal.  The second function "g" simply hides the first one.
   Because of the intervening variable declaration, the two "g" functions
   are not in the same  batch of mutually recursive functions. 
   See also test39 */
let
	function g(a:int):int = a
	type t = int
	function g(a:int):int = a
in
	0
end

../testcases/test49.tig : 
/* error: syntax error, nil should not be preceded by type-id.  */
let 
	type rectype = {name:string, id:int}

	var a:= rectype nil
in
	a
end

../testcases/test5.tig : 
/* define valid recursive types */
let
/* define a list */
type intlist = {hd: int, tl: intlist} 

/* define a tree */
type tree ={key: int, children: treelist}
type treelist = {hd: tree, tl: treelist}

var lis:intlist := intlist { hd=0, tl= nil } 

in
	lis
end

../testcases/test6.tig : 
/* define valid mutually recursive procedures */
let

function do_nothing1(a: int, b: string)=
		do_nothing2(a+1)

function do_nothing2(d: int) =
		do_nothing1(d, "str")

in
	do_nothing1(0, "str2")
end


../testcases/test7.tig : 
/* define valid mutually recursive functions */
let

function do_nothing1(a: int, b: string):int=
		(do_nothing2(a+1);0)

function do_nothing2(d: int):string =
		(do_nothing1(d, "str");" ")

in
	do_nothing1(0, "str2")
end


../testcases/test8.tig : 
/* correct if */
if (10 > 20) then 30 else 40	

../testcases/test9.tig : 
/* error : types of then - else differ */

if (5>4) then 13 else  " "

../additonalcases/reccmp.tig : 
let
  type rt1 = { x: int, p: rt1 }
  type rt2 = { x: int, p: rt1 }
  
  var a : rt1 := rt1 { x=0, p=nil }
  var b : rt1 := rt1 { x=0, p=nil }
  var c : rt2 := rt2 { x=0, p=nil }

in
  a = b.p
end


../additonalcases/test16b.tig : 
/* error: mutually recursive types thet do not pass through record or array */
let 

type a=c
type b=a
type c=d
type d=a

var x : a := 1

in
x 
end

../additonalcases/test5b.tig : 
/* define valid recursive types */
let
type intrec = {hd: int, tl: strrec} 
type strrec = {hd: string, tl: intrec}

var l1:intrec := intrec { hd=0, tl= nil } 
var l2:strrec := strrec { hd="a", tl= nil } 

in
	l1.hd + ord(l2.hd)
end

